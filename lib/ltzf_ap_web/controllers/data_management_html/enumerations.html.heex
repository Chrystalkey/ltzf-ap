<div class="min-h-screen bg-gray-100">
  <.admin_nav current_page="data_management" current_user={@current_user} />

  <div class="py-10">
    <header>
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold leading-tight text-gray-900 m-0">Enumerations</h1>
            <p class="mt-2 text-sm text-gray-600">
              Manage enumeration values for the LTZF backend
            </p>
          </div>
          <a href="/data_management" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Data Management
          </a>
        </div>
      </div>
    </header>

    <main>
      <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
        <div class="px-4 py-8 sm:px-0">
          <.flash_group flash={@flash} />

          <!-- Three Column Layout -->
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Column 1: Available Enumerations -->
            <div class="bg-white shadow overflow-hidden sm:rounded-lg">
              <div class="px-4 py-5 sm:px-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Available Enumerations</h3>
                <p class="mt-1 max-w-2xl text-sm text-gray-500">Click to select an enumeration type</p>
              </div>
              <div class="border-t border-gray-200 p-4">
                <!-- Complex Enumerations Section -->
                <div class="mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <h4 class="text-sm font-medium text-gray-700 mb-3">Complex Enumerations</h4>
                  <div class="grid grid-cols-1 gap-3">
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="gremien">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Gremien</span>
                        <span class="text-xs text-gray-500">Committees</span>
                      </div>
                    </button>
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="autoren">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Autoren</span>
                        <span class="text-xs text-gray-500">Authors</span>
                      </div>
                    </button>
                  </div>
                </div>

                <!-- Simple Enumerations Section -->
                <div>
                  <h4 class="text-sm font-medium text-gray-700 mb-3">Simple Enumerations</h4>
                  <div class="grid grid-cols-1 gap-3">
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="schlagworte">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Schlagworte</span>
                        <span class="text-xs text-gray-500">Keywords</span>
                      </div>
                    </button>
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="stationstypen">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Stationstypen</span>
                        <span class="text-xs text-gray-500">Station Types</span>
                      </div>
                    </button>
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="vorgangstypen">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Vorgangstypen</span>
                        <span class="text-xs text-gray-500">Process Types</span>
                      </div>
                    </button>
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="parlamente">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Parlamente</span>
                        <span class="text-xs text-gray-500">Parliaments</span>
                      </div>
                    </button>
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="vgidtypen">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">VgID Typen</span>
                        <span class="text-xs text-gray-500">Process ID Types</span>
                      </div>
                    </button>
                    <button class="enumeration-item w-full text-left px-4 py-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-enum="dokumententypen">
                      <div class="flex items-center justify-between">
                        <span class="text-sm font-medium text-gray-900">Dokumententypen</span>
                        <span class="text-xs text-gray-500">Document Types</span>
                      </div>
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Column 2: Enumeration Values -->
            <div class="bg-white shadow overflow-hidden sm:rounded-lg">
              <div class="px-4 py-5 sm:px-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Enumeration Values</h3>
                <p class="mt-1 max-w-2xl text-sm text-gray-500">
                  <span id="selected-enum-name">Select an enumeration type</span>
                </p>
              </div>
              <div class="border-t border-gray-200">
                <!-- Search Box with Add Button -->
                <div class="p-4 border-b border-gray-200">
                  <div class="flex space-x-2">
                    <input 
                      type="text" 
                      id="search-input" 
                      placeholder="Filter or Add..." 
                      class="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm disabled:bg-gray-100 disabled:text-gray-500 disabled:cursor-not-allowed"
                      disabled
                    >
                    <button 
                      id="add-btn" 
                      class="px-3 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:bg-gray-400 disabled:hover:bg-gray-400 disabled:hover:scale-100 transition-colors duration-200"
                      disabled
                    >
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                      </svg>
                    </button>
                  </div>
                </div>
                
                <div id="enumeration-values" class="p-4 max-h-96 overflow-y-auto">
                  <div class="text-center text-gray-500">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                    <p class="mt-2 text-sm">Select an enumeration type to view its values</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Column 3: Action Buttons and Filtering -->
            <div class="space-y-6">
              <!-- Action Buttons -->
              <div class="bg-blue-50 shadow overflow-hidden sm:rounded-lg" style="background-color: #eff6ff !important;">
                <div class="px-4 py-5 sm:px-6">
                  <h3 class="text-lg leading-6 font-medium text-gray-900">Actions</h3>
                  <p class="mt-1 max-w-2xl text-sm text-gray-500">Manage enumeration values</p>
                </div>
                <div class="border-t border-gray-200 p-4">
                  <div class="space-y-3">
                    <button id="merge-btn" disabled class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 hover:shadow-lg hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:shadow-sm transition-all duration-200">
                      <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V9a2 2 0 00-2-2H8z"></path>
                      </svg>
                      Merge
                    </button>
                    
                    <button id="reload-btn" disabled class="w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 hover:shadow-lg hover:scale-105 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:shadow-sm disabled:hover:border-gray-300 transition-all duration-200">
                      <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      Reload
                    </button>
                    
                    <button id="delete-btn" disabled class="w-full inline-flex justify-center items-center px-4 py-2 border-2 border-red-600 text-sm font-medium rounded-md shadow-lg text-red-600 bg-white hover:bg-red-50 hover:border-red-700 hover:text-red-700 hover:shadow-xl hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-30 disabled:cursor-not-allowed disabled:bg-gray-100 disabled:border-gray-300 disabled:text-gray-400 disabled:hover:scale-100 disabled:hover:shadow-lg transition-all duration-200">
                      <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Delete Selected
                    </button>
                  </div>
                </div>
              </div>

              <!-- Filtering Section (only for complex enumerations) -->
              <div id="filtering-section" class="hidden bg-white shadow overflow-hidden sm:rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                  <h3 class="text-lg leading-6 font-medium text-gray-900">Filtering</h3>
                  <p class="mt-1 max-w-2xl text-sm text-gray-500">Filter complex enumeration values</p>
                </div>
                <div class="border-t border-gray-200 p-4">
                  <div id="filter-fields" class="space-y-3">
                    <!-- Filter fields will be dynamically generated here -->
                  </div>
                  <div class="mt-4">
                    <p class="text-xs text-gray-500 mb-2">Filters apply automatically as you type</p>
                    <div class="flex space-x-2">
                      <button id="add-complex-btn" class="inline-flex justify-center items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Add
                      </button>
                      <button id="clear-filters-btn" class="inline-flex justify-center items-center px-3 py-1 border border-gray-300 text-xs font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Clear All
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Complex Enumeration Edit Modal -->
  <div id="complex-edit-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900" id="modal-title">Edit Complex Enumeration</h3>
          <button id="close-modal" class="text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="modal-content" class="space-y-4">
          <!-- Form fields will be dynamically generated here -->
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button id="cancel-edit" class="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Cancel
          </button>
          <button id="save-edit" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Save
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const backendUrl = '<%= @backend_url %>';
  const apiKey = '<%= @api_key %>';
  let currentEnumeration = null;
  let selectedValues = new Set();
  let currentSearchTerm = '';
  let currentPage = 1;
  let perPage = 20;
  let allValues = [];
  let moreAvailable = false;

  function resetPagination() {
    currentPage = 1;
    allValues = [];
    moreAvailable = false;
  }

  function init() {
    setupEventListeners();
    // Auto-select the first enumeration type
    const firstEnumItem = document.querySelector('.enumeration-item');
    if (firstEnumItem) {
      const enumType = firstEnumItem.dataset.enum;
      selectEnumeration(enumType);
    }
  }

  function setupEventListeners() {
    document.querySelectorAll('.enumeration-item').forEach(item => {
      item.addEventListener('click', function() {
        const enumType = this.dataset.enum;
        selectEnumeration(enumType);
      });
    });

    const searchInput = document.getElementById('search-input');
    let searchTimeout;
    searchInput.addEventListener('input', function() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        if (currentEnumeration) {
          currentSearchTerm = this.value;
          resetPagination();
          fetchEnumerationValues();
        }
      }, 300);
    });

    document.getElementById('merge-btn').addEventListener('click', handleMerge);
    document.getElementById('reload-btn').addEventListener('click', handleReload);
    document.getElementById('add-btn').addEventListener('click', handleAdd);
    document.getElementById('delete-btn').addEventListener('click', handleDelete);
    
    // Filter event listeners
    document.getElementById('add-complex-btn').addEventListener('click', handleAdd);
    document.getElementById('clear-filters-btn').addEventListener('click', clearFilters);
    
    // Modal event listeners
    document.getElementById('close-modal').addEventListener('click', hideModal);
    document.getElementById('cancel-edit').addEventListener('click', hideModal);
    document.getElementById('save-edit').addEventListener('click', saveEdit);
    
    // Close modal when clicking outside
    document.getElementById('complex-edit-modal').addEventListener('click', function(e) {
      if (e.target === this) {
        hideModal();
      }
    });
  }

  function selectEnumeration(enumType) {
    document.querySelectorAll('.enumeration-item').forEach(item => {
      item.classList.remove('bg-indigo-50', 'border-indigo-300', 'ring-2', 'ring-indigo-500');
    });
    const selectedItem = document.querySelector(`[data-enum="${enumType}"]`);
    selectedItem.classList.add('bg-indigo-50', 'border-indigo-300', 'ring-2', 'ring-indigo-500');
    const enumName = selectedItem.querySelector('span').textContent;
    document.getElementById('selected-enum-name').textContent = enumName;
    
    const searchInput = document.getElementById('search-input');
    const addBtn = document.getElementById('add-btn');
    const isComplexEnum = enumType === 'gremien' || enumType === 'autoren';
    
    if (isComplexEnum) {
      // For complex enumerations: disable search input and hide add button
      searchInput.disabled = true;
      searchInput.placeholder = "Search disabled for complex enumerations";
      addBtn.style.display = 'none';
    } else {
      // For simple enumerations: enable search input and show add button
      searchInput.disabled = false;
      searchInput.placeholder = "Filter or Add...";
      addBtn.style.display = 'block';
      addBtn.disabled = false;
      addBtn.innerHTML = `
        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
        </svg>
      `;
    }
    
    searchInput.value = '';
    currentEnumeration = enumType;
    currentSearchTerm = '';
    
    // Handle complex enumeration filtering
    const filteringSection = document.getElementById('filtering-section');
    
    if (isComplexEnum) {
      filteringSection.classList.remove('hidden');
      setupFilterFields(enumType);
    } else {
      filteringSection.classList.add('hidden');
    }
    
    resetPagination();
    fetchEnumerationValues();
    updateButtonStates();
  }

  async function fetchEnumerationValues() {
    if (!currentEnumeration) return;
    const container = document.getElementById('enumeration-values');
    container.innerHTML = '<div class="text-center text-gray-500 py-8">Loading...</div>';
    try {
      let url;
      let isComplexEnum = currentEnumeration === 'gremien' || currentEnumeration === 'autoren';
      
      if (isComplexEnum) {
        // Use the specific endpoints for complex enumerations
        url = `${backendUrl}/api/v1/${currentEnumeration}?per_page=${perPage}&page=${currentPage}`;
        
        // Add filter parameters for complex enumerations
        const filterParams = getFilterParams();
        if (Object.keys(filterParams).length > 0) {
          const filterQuery = new URLSearchParams(filterParams).toString();
          url += `&${filterQuery}`;
        }
      } else {
        // Use the enumeration endpoint for simple enumerations
        url = `${backendUrl}/api/v1/enumeration/${currentEnumeration}?per_page=${perPage}&page=${currentPage}`;
        if (currentSearchTerm) {
          url += `&contains=${encodeURIComponent(currentSearchTerm)}`;
        }
      }
      
      const response = await fetch(url, { headers: { 'X-API-Key': apiKey } });
      let values = [];
      if (response.status === 204) {
        values = [];
      } else if (response.ok) {
        values = await response.json();
      } else {
        throw new Error('Failed to fetch values');
      }
      
      // Check if more data is available
      const totalCount = parseInt(response.headers.get('X-Total-Count') || '0', 10);
      const totalPages = parseInt(response.headers.get('X-Total-Pages') || '1', 10);
      const currentPageFromHeader = parseInt(response.headers.get('X-Page') || '1', 10);
      
      moreAvailable = (currentPage < totalPages);
      

      
      if (currentPage === 1) {
        allValues = values;
      } else {
        allValues = allValues.concat(values);
      }
      displayEnumerationValues();
    } catch (error) {
      container.innerHTML = `<div class='text-center text-red-500 py-8'>Error loading values</div>`;
      console.error(error);
    }
  }

  function displayEnumerationValues() {
    const container = document.getElementById('enumeration-values');
    const values = allValues;
    const isComplexEnum = currentEnumeration === 'gremien' || currentEnumeration === 'autoren';
    
    if (!values || values.length === 0) {
      container.innerHTML = `
        <div class="text-center text-gray-500 py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          <p class="mt-2 text-sm">No values found for this enumeration</p>
        </div>
      `;
      return;
    }
    
    const valuesList = document.createElement('ul');
    valuesList.className = 'divide-y divide-gray-200 list-none';
    valuesList.style.listStyle = 'none';
    valuesList.style.padding = '0';
    valuesList.style.margin = '0';
    
    values.forEach(value => {
      const li = document.createElement('li');
      li.className = 'px-4 py-3 hover:bg-gray-50 select-none';
      li.style.listStyle = 'none';
      
      if (isComplexEnum) {
        // Handle complex enumeration objects
        const displayValue = formatComplexValue(value);
        const valueKey = JSON.stringify(value); // Use JSON string as key for complex objects
        li.dataset.value = valueKey;
        
        li.innerHTML = `
          <div class="flex items-center justify-between">
            <div class="flex items-center flex-1">
              <input type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded mr-3" ${selectedValues.has(valueKey) ? 'checked' : ''}>
              <div class="flex-1">
                <div class="text-sm font-medium text-gray-900">${displayValue.title}</div>
                <div class="text-xs text-gray-500">${displayValue.subtitle}</div>
              </div>
            </div>
            <button class="edit-btn inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
              <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
              Edit
            </button>
          </div>
        `;
        
        const checkbox = li.querySelector('input[type="checkbox"]');
        checkbox.addEventListener('click', function(e) {
          e.stopPropagation();
          if (this.checked) {
            selectedValues.add(valueKey);
          } else {
            selectedValues.delete(valueKey);
          }
          updateButtonStates();
        });
        
        const editBtn = li.querySelector('.edit-btn');
        editBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          editComplexValue(value, li);
        });
        
        li.addEventListener('dblclick', function(e) {
          if (e.target.type !== 'checkbox') {
            editComplexValue(value, li);
          }
        });
      } else {
        // Handle simple string values
        li.dataset.value = value;
        li.innerHTML = `
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <input type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded mr-3" ${selectedValues.has(value) ? 'checked' : ''}>
              <span class="text-sm text-gray-900">${value}</span>
            </div>
            <button class="edit-btn inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
              <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
              Edit
            </button>
          </div>
        `;
        
        const checkbox = li.querySelector('input[type="checkbox"]');
        checkbox.addEventListener('click', function(e) {
          e.stopPropagation();
          if (this.checked) {
            selectedValues.add(value);
          } else {
            selectedValues.delete(value);
          }
          updateButtonStates();
        });
        
        const editBtn = li.querySelector('.edit-btn');
        editBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          editValue(value, li);
        });
        
        li.addEventListener('dblclick', function(e) {
          if (e.target.type !== 'checkbox') {
            editValue(value, li);
          }
        });
      }
      
      valuesList.appendChild(li);
    });
    
    container.innerHTML = '';
    container.appendChild(valuesList);
    
    // Add Load More button if moreAvailable
    if (moreAvailable) {
      const loadMoreBtn = document.createElement('button');
      loadMoreBtn.textContent = `Load more`;
      loadMoreBtn.className = 'mt-4 w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
      loadMoreBtn.addEventListener('click', function() {
        currentPage += 1;
        fetchEnumerationValues();
      });
      container.appendChild(loadMoreBtn);
    } else {
      // Add a message showing we've loaded all items
      if (values.length > 0) {
        const endMessage = document.createElement('div');
        endMessage.className = 'mt-4 text-center text-sm text-gray-500';
        endMessage.textContent = `Loaded ${values.length} items`;
        container.appendChild(endMessage);
      }
    }
  }

  function editValue(oldValue, element) {
    const input = document.createElement('input');
    input.type = 'text';
    input.value = oldValue;
    input.className = 'w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-indigo-500 focus:border-indigo-500';
    
    const originalContent = element.innerHTML;
    element.innerHTML = '';
    element.appendChild(input);
    
    input.focus();
    input.select();
    
    function saveEdit() {
      const newValue = input.value.trim();
      if (newValue && newValue !== oldValue) {
        // Update the value in the stored data
        const index = allValues.indexOf(oldValue);
        if (index !== -1) {
          allValues[index] = newValue;
          if (selectedValues.has(oldValue)) {
            selectedValues.delete(oldValue);
            selectedValues.add(newValue);
          }
        }
        displayEnumerationValues();
      } else {
        element.innerHTML = originalContent;
      }
    }
    
    input.addEventListener('blur', saveEdit);
    input.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        saveEdit();
      }
    });
  }

  function setupFilterFields(enumType) {
    const filterFields = document.getElementById('filter-fields');
    filterFields.innerHTML = '';
    
    if (enumType === 'gremien') {
      const fields = [
        { name: 'gr', label: 'Committee Name', type: 'text', placeholder: 'e.g., Ausschuss' },
        { name: 'p', label: 'Parliament', type: 'text', placeholder: 'e.g., BT, BR' },
        { name: 'wp', label: 'Electoral Period', type: 'number', placeholder: 'e.g., 20' }
      ];
      fields.forEach(field => addFilterField(field));
    } else if (enumType === 'autoren') {
      const fields = [
        { name: 'person', label: 'Person Name', type: 'text', placeholder: 'e.g., Dr. Schmidt' },
        { name: 'org', label: 'Organization', type: 'text', placeholder: 'e.g., SPD' },
        { name: 'fach', label: 'Professional Field', type: 'text', placeholder: 'e.g., Verfassungsrecht' }
      ];
      fields.forEach(field => addFilterField(field));
    }
  }

  function addFilterField(field) {
    const filterFields = document.getElementById('filter-fields');
    const fieldDiv = document.createElement('div');
    fieldDiv.innerHTML = `
      <label class="block text-sm font-medium text-gray-700">${field.label}</label>
      <input type="${field.type}" 
             id="filter-${field.name}" 
             name="${field.name}" 
             placeholder="${field.placeholder}"
             class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
    `;
    filterFields.appendChild(fieldDiv);
    
    // Add live filtering functionality
    const input = fieldDiv.querySelector(`#filter-${field.name}`);
    let filterTimeout;
    input.addEventListener('input', function() {
      clearTimeout(filterTimeout);
      filterTimeout = setTimeout(() => {
        if (currentEnumeration) {
          resetPagination();
          fetchEnumerationValues();
        }
      }, 300); // Same debounce delay as search input
    });
  }

  function formatComplexValue(value) {
    if (currentEnumeration === 'gremien') {
      // For gremien: display name as title, parlament + wahlperiode as subtitle
      const title = value.name || 'Unnamed Committee';
      const subtitle = `${value.parlament || 'Unknown'} - Electoral Period ${value.wahlperiode || 'Unknown'}`;
      return { title, subtitle };
    } else if (currentEnumeration === 'autoren') {
      // For autoren: display person name or organization as title, additional info as subtitle
      const title = value.person || value.organisation || 'Unnamed Author';
      const subtitle = value.organisation && value.person ? 
        `Organization: ${value.organisation}` : 
        (value.fachgebiet ? `Field: ${value.fachgebiet}` : 'No additional info');
      return { title, subtitle };
    }
    return { title: 'Unknown', subtitle: 'Unknown type' };
  }

  function editComplexValue(value, li) {
    showEditModal(value);
  }

  function showEditModal(value) {
    const modal = document.getElementById('complex-edit-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    
    modalTitle.textContent = `Edit ${currentEnumeration === 'gremien' ? 'Committee' : 'Author'}`;
    modalContent.innerHTML = '';
    
    // Generate form fields based on the enumeration type
    if (currentEnumeration === 'gremien') {
      const fields = [
        { name: 'name', label: 'Committee Name', type: 'text', required: true, value: value.name || '' },
        { name: 'parlament', label: 'Parliament', type: 'text', required: true, value: value.parlament || '' },
        { name: 'wahlperiode', label: 'Electoral Period', type: 'number', required: true, value: value.wahlperiode || '' },
        { name: 'link', label: 'Link', type: 'url', required: false, value: value.link || '' }
      ];
      fields.forEach(field => addModalField(field, modalContent));
    } else if (currentEnumeration === 'autoren') {
      const fields = [
        { name: 'person', label: 'Person Name', type: 'text', required: false, value: value.person || '' },
        { name: 'organisation', label: 'Organization', type: 'text', required: true, value: value.organisation || '' },
        { name: 'fachgebiet', label: 'Professional Field', type: 'text', required: false, value: value.fachgebiet || '' },
        { name: 'lobbyregister', label: 'Lobby Register Link', type: 'url', required: false, value: value.lobbyregister || '' }
      ];
      fields.forEach(field => addModalField(field, modalContent));
    }
    
    // Store the original value for comparison
    modal.dataset.originalValue = JSON.stringify(value);
    modal.classList.remove('hidden');
  }

  function addModalField(field, container) {
    const fieldDiv = document.createElement('div');
    fieldDiv.innerHTML = `
      <label class="block text-sm font-medium text-gray-700">
        ${field.label}
        ${field.required ? '<span class="text-red-500">*</span>' : ''}
      </label>
      <input type="${field.type}" 
             id="modal-${field.name}" 
             name="${field.name}" 
             value="${field.value}"
             ${field.required ? 'required' : ''}
             class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
    `;
    container.appendChild(fieldDiv);
  }

  function getFilterParams() {
    const params = {};
    const isComplexEnum = currentEnumeration === 'gremien' || currentEnumeration === 'autoren';
    
    if (isComplexEnum) {
      if (currentEnumeration === 'gremien') {
        ['gr', 'p', 'wp'].forEach(field => {
          const value = document.getElementById(`filter-${field}`)?.value?.trim();
          if (value) params[field] = value;
        });
      } else if (currentEnumeration === 'autoren') {
        ['person', 'org', 'fach'].forEach(field => {
          const value = document.getElementById(`filter-${field}`)?.value?.trim();
          if (value) params[field] = value;
        });
      }
    }
    
    return params;
  }



  function clearFilters() {
    const filterInputs = document.querySelectorAll('#filter-fields input');
    filterInputs.forEach(input => {
      input.value = '';
      // Trigger the input event to apply the live filter
      input.dispatchEvent(new Event('input'));
    });
  }

  function hideModal() {
    const modal = document.getElementById('complex-edit-modal');
    modal.classList.add('hidden');
    modal.dataset.originalValue = '';
    modal.dataset.mergeValues = '';
    const saveBtn = document.getElementById('save-edit');
    saveBtn.textContent = 'Save';
  }

  function showAddModal() {
    const modal = document.getElementById('complex-edit-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    const saveBtn = document.getElementById('save-edit');
    
    modalTitle.textContent = `Add New ${currentEnumeration === 'gremien' ? 'Committee' : 'Author'}`;
    saveBtn.textContent = 'Add';
    modalContent.innerHTML = '';
    
    // Generate form fields based on the enumeration type
    if (currentEnumeration === 'gremien') {
      const fields = [
        { name: 'name', label: 'Committee Name', type: 'text', required: true, value: '' },
        { name: 'parlament', label: 'Parliament', type: 'text', required: true, value: '' },
        { name: 'wahlperiode', label: 'Electoral Period', type: 'number', required: true, value: '' },
        { name: 'link', label: 'Link', type: 'url', required: false, value: '' }
      ];
      fields.forEach(field => addModalField(field, modalContent));
    } else if (currentEnumeration === 'autoren') {
      const fields = [
        { name: 'person', label: 'Person Name', type: 'text', required: false, value: '' },
        { name: 'organisation', label: 'Organization', type: 'text', required: true, value: '' },
        { name: 'fachgebiet', label: 'Professional Field', type: 'text', required: false, value: '' },
        { name: 'lobbyregister', label: 'Lobby Register Link', type: 'url', required: false, value: '' }
      ];
      fields.forEach(field => addModalField(field, modalContent));
    }
    
    // Clear the original value to indicate this is an add operation
    modal.dataset.originalValue = '';
    modal.classList.remove('hidden');
  }

  function showMergeModal() {
    const selectedValuesArray = Array.from(selectedValues);
    if (selectedValuesArray.length < 2) {
      alert('Please select at least 2 values to merge');
      return;
    }
    
    const modal = document.getElementById('complex-edit-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    const saveBtn = document.getElementById('save-edit');
    
    modalTitle.textContent = `Merge ${currentEnumeration === 'gremien' ? 'Committees' : 'Authors'}`;
    saveBtn.textContent = 'Merge';
    modalContent.innerHTML = `
      <div class="mb-4">
        <p class="text-sm text-gray-600 mb-2">Selected items to merge:</p>
        <div class="bg-gray-50 p-3 rounded-md max-h-32 overflow-y-auto">
          ${selectedValuesArray.map(value => {
            const obj = JSON.parse(value);
            const displayValue = formatComplexValue(obj);
            return `<div class="text-sm">• ${displayValue.title} - ${displayValue.subtitle}</div>`;
          }).join('')}
        </div>
      </div>
    `;
    
    // Generate form fields for the merged result
    if (currentEnumeration === 'gremien') {
      const fields = [
        { name: 'name', label: 'Committee Name', type: 'text', required: true, value: '' },
        { name: 'parlament', label: 'Parliament', type: 'text', required: true, value: '' },
        { name: 'wahlperiode', label: 'Electoral Period', type: 'number', required: true, value: '' },
        { name: 'link', label: 'Link', type: 'url', required: false, value: '' }
      ];
      fields.forEach(field => addModalField(field, modalContent));
    } else if (currentEnumeration === 'autoren') {
      const fields = [
        { name: 'person', label: 'Person Name', type: 'text', required: false, value: '' },
        { name: 'organisation', label: 'Organization', type: 'text', required: true, value: '' },
        { name: 'fachgebiet', label: 'Professional Field', type: 'text', required: false, value: '' },
        { name: 'lobbyregister', label: 'Lobby Register Link', type: 'url', required: false, value: '' }
      ];
      fields.forEach(field => addModalField(field, modalContent));
    }
    
    // Store selected values for merge operation
    modal.dataset.mergeValues = JSON.stringify(selectedValuesArray);
    modal.classList.remove('hidden');
  }

  function handleComplexDelete() {
    const valuesToDelete = Array.from(selectedValues);
    const count = valuesToDelete.length;
    
    const confirmed = confirm(`Are you sure you want to delete ${count} selected ${currentEnumeration === 'gremien' ? 'committee' : 'author'}${count > 1 ? 's' : ''}?\n\nThis action cannot be undone.`);
    
    if (!confirmed) return;
    
    // Remove selected values from the list
    valuesToDelete.forEach(valueKey => {
      const value = JSON.parse(valueKey);
      const index = allValues.findIndex(v => JSON.stringify(v) === JSON.stringify(value));
      if (index !== -1) {
        allValues.splice(index, 1);
      }
    });
    
    // Clear selection
    selectedValues.clear();
    
    // Update display
    displayEnumerationValues();
    updateButtonStates();
    
    alert(`Successfully deleted ${count} ${currentEnumeration === 'gremien' ? 'committee' : 'author'}${count > 1 ? 's' : ''}`);
  }

  function saveEdit() {
    const modal = document.getElementById('complex-edit-modal');
    const originalValue = modal.dataset.originalValue;
    const mergeValues = modal.dataset.mergeValues;
    const newValue = {};
    
    // Collect form data
    const formInputs = modal.querySelectorAll('input');
    formInputs.forEach(input => {
      const fieldName = input.name;
      const value = input.value.trim();
      if (value || input.required) {
        newValue[fieldName] = value;
      }
    });
    
    // Validate required fields
    if (currentEnumeration === 'gremien') {
      if (!newValue.name || !newValue.parlament || !newValue.wahlperiode) {
        alert('Please fill in all required fields (Name, Parliament, Electoral Period)');
        return;
      }
    } else if (currentEnumeration === 'autoren') {
      if (!newValue.organisation) {
        alert('Please fill in the Organization field');
        return;
      }
    }
    
    if (mergeValues) {
      // Merge operation
      const valuesToMerge = JSON.parse(mergeValues);
      
      // Remove the values being merged
      valuesToMerge.forEach(valueKey => {
        const value = JSON.parse(valueKey);
        const index = allValues.findIndex(v => JSON.stringify(v) === JSON.stringify(value));
        if (index !== -1) {
          allValues.splice(index, 1);
        }
        selectedValues.delete(valueKey);
      });
      
      // Add the merged value
      allValues.push(newValue);
      
      displayEnumerationValues();
      hideModal();
      alert('Values merged successfully!');
    } else if (originalValue) {
      // Edit operation
      const originalObj = JSON.parse(originalValue);
      const index = allValues.findIndex(v => JSON.stringify(v) === JSON.stringify(originalObj));
      if (index !== -1) {
        allValues[index] = newValue;
        
        // Update selection if the original value was selected
        const originalKey = JSON.stringify(originalObj);
        const newKey = JSON.stringify(newValue);
        if (selectedValues.has(originalKey)) {
          selectedValues.delete(originalKey);
          selectedValues.add(newKey);
        }
        
        displayEnumerationValues();
        hideModal();
        alert('Value updated successfully!');
      }
    } else {
      // Add operation
      allValues.push(newValue);
      displayEnumerationValues();
      hideModal();
      alert('Value added successfully!');
    }
  }

  function updateButtonStates() {
    const hasSelection = selectedValues.size > 0;
    const hasEnumeration = currentEnumeration !== null;
    
    document.getElementById('merge-btn').disabled = !hasSelection;
    document.getElementById('reload-btn').disabled = !hasEnumeration;
    document.getElementById('delete-btn').disabled = !hasSelection;
  }

  function handleMerge() {
    if (selectedValues.size === 0) return;
    
    const isComplexEnum = currentEnumeration === 'gremien' || currentEnumeration === 'autoren';
    
    if (isComplexEnum) {
      showMergeModal();
      return;
    }
    
    const valuesToMerge = Array.from(selectedValues);
    const mergedValue = prompt('Enter the merged value:', valuesToMerge[0]);
    
    if (mergedValue && mergedValue.trim()) {
      // Prepare the request body for the PUT endpoint - only send selected values and merge result
      const requestBody = {
        objects: [mergedValue],
        replacing: valuesToMerge.map(value => ({
          values: [value],
          replaced_by: 0  // Index 0 in the objects array (the merged value)
        }))
      };
      

      
      // Send the merge request to the API
      fetch(`${backendUrl}/api/v1/enumeration/${currentEnumeration}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': apiKey
        },
        body: JSON.stringify(requestBody)
      })
      .then(response => {
        if (response.ok) {
          alert('Values merged successfully!');
          // Reload the data to reflect the changes
          resetPagination();
          fetchEnumerationValues();
        } else {
          alert('Error merging values');
          console.error('Merge failed with status:', response.status);
        }
      })
      .catch(error => {
        console.error('Error merging:', error);
        alert('Error merging values');
      });
    }
  }



  function handleReload() {
    if (!currentEnumeration) return;
    
    // Reload the current enumeration values
    resetPagination();
    fetchEnumerationValues();
  }

  function handleAdd() {
    if (!currentEnumeration) return;
    
    const isComplexEnum = currentEnumeration === 'gremien' || currentEnumeration === 'autoren';
    
    if (isComplexEnum) {
      showAddModal();
      return;
    }
    
    const searchInput = document.getElementById('search-input');
    const newValue = searchInput.value.trim();
    
    if (!newValue) {
      alert('Please enter a value to add');
      return;
    }
    
    // Check if value already exists
    if (allValues.includes(newValue)) {
      alert('This value already exists');
      return;
    }
    
    // Prepare the request body for the PUT endpoint
    const requestBody = {
      objects: allValues.concat([newValue])
    };
    
    // Send the add request to the API
    fetch(`${backendUrl}/api/v1/enumeration/${currentEnumeration}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey
      },
      body: JSON.stringify(requestBody)
    })
    .then(response => {
      if (response.ok) {
        // Clear the search input
        searchInput.value = '';
        currentSearchTerm = '';
        
        // Reload the data to reflect the changes
        resetPagination();
        fetchEnumerationValues();
        
        // Show success message
        alert(`Added "${newValue}" to ${currentEnumeration}`);
      } else {
        alert('Error adding value');
        console.error('Add failed with status:', response.status);
      }
    })
    .catch(error => {
      console.error('Error adding:', error);
      alert('Error adding value');
    });
  }

  function handleDelete() {
    if (selectedValues.size === 0) return;
    
    const isComplexEnum = currentEnumeration === 'gremien' || currentEnumeration === 'autoren';
    
    if (isComplexEnum) {
      handleComplexDelete();
      return;
    }
    
    const valuesToDelete = Array.from(selectedValues);
    const count = valuesToDelete.length;
    
    // Show confirmation dialog with count
    const confirmed = confirm(`Are you sure you want to delete ${count} selected value${count > 1 ? 's' : ''}?\n\nThis action cannot be undone.`);
    
    if (!confirmed) return;
    
    // Prepare the request body for the PUT endpoint - remove selected values
    const requestBody = {
      objects: allValues.filter(value => !valuesToDelete.includes(value))
    };
    

    
    // Send the delete request to the API
    fetch(`${backendUrl}/api/v1/enumeration/${currentEnumeration}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey
      },
      body: JSON.stringify(requestBody)
    })
    .then(response => {
      if (response.ok) {
        // Clear selection
        selectedValues.clear();
        
        // Reload the data to reflect the changes
        resetPagination();
        fetchEnumerationValues();
        
        // Show success message
        alert(`Successfully deleted ${count} value${count > 1 ? 's' : ''}`);
      } else {
        alert('Error deleting values');
        console.error('Delete failed with status:', response.status);
      }
    })
    .catch(error => {
      console.error('Error deleting:', error);
      alert('Error deleting values');
    });
  }

  // Initialize the page
  init();
});
</script> 